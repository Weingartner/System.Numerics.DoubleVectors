<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Numerics.DoubleVectors</name>
    </assembly>
    <members>
        <member name="T:System.Numerics.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Numerics.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Numerics.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Numerics.Strings.Arg_ArgumentOutOfRangeException">
            <summary>
              Looks up a localized string similar to Index was out of bounds:.
            </summary>
        </member>
        <member name="P:System.Numerics.Strings.Arg_ElementsInSourceIsGreaterThanDestination">
            <summary>
              Looks up a localized string similar to Number of elements in source vector is greater than the destination array.
            </summary>
        </member>
        <member name="P:System.Numerics.Strings.Arg_MultiDimArrayNotSupported">
            <summary>
              Looks up a localized string similar to Only one-dimensional arrays are supported.
            </summary>
        </member>
        <member name="P:System.Numerics.Strings.Arg_NullArgumentNullRef">
            <summary>
              Looks up a localized string similar to The method was called with a null array argument..
            </summary>
        </member>
        <member name="P:System.Numerics.Strings.Arg_RegisterLengthOfRangeException">
            <summary>
              Looks up a localized string similar to length must be less than.
            </summary>
        </member>
        <member name="P:System.Numerics.Strings.Arg_TypeNotSupported">
            <summary>
              Looks up a localized string similar to Specified type is not supported.
            </summary>
        </member>
        <member name="P:System.Numerics.Strings.Reflection_MethodNotSupported">
            <summary>
              Looks up a localized string similar to Vector&lt;T&gt;.Count cannot be called via reflection when intrinsics are enabled..
            </summary>
        </member>
        <member name="T:System.Numerics.System.DoubleNumerics.Matrix3x2">
            <summary>
            A structure encapsulating a 3x2 matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix3x2.M11">
            <summary>
            The first element of the first row
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix3x2.M12">
            <summary>
            The second element of the first row
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix3x2.M21">
            <summary>
            The first element of the second row
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix3x2.M22">
            <summary>
            The second element of the second row
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix3x2.M31">
            <summary>
            The first element of the third row
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix3x2.M32">
            <summary>
            The second element of the third row
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Matrix3x2.Identity">
            <summary>
            Returns the multiplicative identity matrix.
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Matrix3x2.IsIdentity">
            <summary>
            Returns whether the matrix is the identity matrix.
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Matrix3x2.Translation">
            <summary>
            Gets or sets the translation component of this matrix.
            </summary>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Matrix3x2 from the given components.
            </summary>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.CreateTranslation(System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Creates a translation matrix from the given vector.
            </summary>
            <param name="position">The translation position.</param>
            <returns>A translation matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.CreateTranslation(System.Double,System.Double)">
            <summary>
            Creates a translation matrix from the given X and Y components.
            </summary>
            <param name="xPosition">The X position.</param>
            <param name="yPosition">The Y position.</param>
            <returns>A translation matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.CreateScale(System.Double,System.Double)">
            <summary>
            Creates a scale matrix from the given X and Y components.
            </summary>
            <param name="xScale">Value to scale by on the X-axis.</param>
            <param name="yScale">Value to scale by on the Y-axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.CreateScale(System.Double,System.Double,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Creates a scale matrix that is offset by a given center point.
            </summary>
            <param name="xScale">Value to scale by on the X-axis.</param>
            <param name="yScale">Value to scale by on the Y-axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.CreateScale(System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Creates a scale matrix from the given vector scale.
            </summary>
            <param name="scales">The scale to use.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.CreateScale(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Creates a scale matrix from the given vector scale with an offset from the given center point.
            </summary>
            <param name="scales">The scale to use.</param>
            <param name="centerPoint">The center offset.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.CreateScale(System.Double)">
            <summary>
            Creates a scale matrix that scales uniformly with the given scale.
            </summary>
            <param name="scale">The uniform scale to use.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.CreateScale(System.Double,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Creates a scale matrix that scales uniformly with the given scale with an offset from the given center.
            </summary>
            <param name="scale">The uniform scale to use.</param>
            <param name="centerPoint">The center offset.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.CreateSkew(System.Double,System.Double)">
            <summary>
            Creates a skew matrix from the given angles in radians.
            </summary>
            <param name="radiansX">The X angle, in radians.</param>
            <param name="radiansY">The Y angle, in radians.</param>
            <returns>A skew matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.CreateSkew(System.Double,System.Double,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Creates a skew matrix from the given angles in radians and a center point.
            </summary>
            <param name="radiansX">The X angle, in radians.</param>
            <param name="radiansY">The Y angle, in radians.</param>
            <param name="centerPoint">The center point.</param>
            <returns>A skew matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.CreateRotation(System.Double)">
            <summary>
            Creates a rotation matrix using the given rotation in radians.
            </summary>
            <param name="radians">The amount of rotation, in radians.</param>
            <returns>A rotation matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.CreateRotation(System.Double,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Creates a rotation matrix using the given rotation in radians and a center point.
            </summary>
            <param name="radians">The amount of rotation, in radians.</param>
            <param name="centerPoint">The center point.</param>
            <returns>A rotation matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.GetDeterminant">
            <summary>
            Calculates the determinant for this matrix. 
            The determinant is calculated by expanding the matrix with a third column whose values are (0,0,1).
            </summary>
            <returns>The determinant.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.Invert(System.Numerics.System.DoubleNumerics.Matrix3x2,System.Numerics.System.DoubleNumerics.Matrix3x2@)">
            <summary>
            Attempts to invert the given matrix. If the operation succeeds, the inverted matrix is stored in the result parameter.
            </summary>
            <param name="matrix">The source matrix.</param>
            <param name="result">The output matrix.</param>
            <returns>True if the operation succeeded, False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.Lerp(System.Numerics.System.DoubleNumerics.Matrix3x2,System.Numerics.System.DoubleNumerics.Matrix3x2,System.Double)">
            <summary>
            Linearly interpolates from matrix1 to matrix2, based on the third parameter.
            </summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <param name="amount">The relative weighting of matrix2.</param>
            <returns>The interpolated matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.Negate(System.Numerics.System.DoubleNumerics.Matrix3x2)">
            <summary>
            Negates the given matrix by multiplying all values by -1.
            </summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.Add(System.Numerics.System.DoubleNumerics.Matrix3x2,System.Numerics.System.DoubleNumerics.Matrix3x2)">
            <summary>
            Adds each matrix element in value1 with its corresponding element in value2.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The matrix containing the summed values.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.Subtract(System.Numerics.System.DoubleNumerics.Matrix3x2,System.Numerics.System.DoubleNumerics.Matrix3x2)">
            <summary>
            Subtracts each matrix element in value2 from its corresponding element in value1.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The matrix containing the resulting values.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.Multiply(System.Numerics.System.DoubleNumerics.Matrix3x2,System.Numerics.System.DoubleNumerics.Matrix3x2)">
            <summary>
            Multiplies two matrices together and returns the resulting matrix.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The product matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.Multiply(System.Numerics.System.DoubleNumerics.Matrix3x2,System.Double)">
            <summary>
            Scales all elements in a matrix by the given scalar factor.
            </summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling value to use.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.op_UnaryNegation(System.Numerics.System.DoubleNumerics.Matrix3x2)">
            <summary>
            Negates the given matrix by multiplying all values by -1.
            </summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.op_Addition(System.Numerics.System.DoubleNumerics.Matrix3x2,System.Numerics.System.DoubleNumerics.Matrix3x2)">
            <summary>
            Adds each matrix element in value1 with its corresponding element in value2.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The matrix containing the summed values.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.op_Subtraction(System.Numerics.System.DoubleNumerics.Matrix3x2,System.Numerics.System.DoubleNumerics.Matrix3x2)">
            <summary>
            Subtracts each matrix element in value2 from its corresponding element in value1.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The matrix containing the resulting values.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.op_Multiply(System.Numerics.System.DoubleNumerics.Matrix3x2,System.Numerics.System.DoubleNumerics.Matrix3x2)">
            <summary>
            Multiplies two matrices together and returns the resulting matrix.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The product matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.op_Multiply(System.Numerics.System.DoubleNumerics.Matrix3x2,System.Double)">
            <summary>
            Scales all elements in a matrix by the given scalar factor.
            </summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling value to use.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.op_Equality(System.Numerics.System.DoubleNumerics.Matrix3x2,System.Numerics.System.DoubleNumerics.Matrix3x2)">
            <summary>
            Returns a boolean indicating whether the given matrices are equal.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>True if the matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.op_Inequality(System.Numerics.System.DoubleNumerics.Matrix3x2,System.Numerics.System.DoubleNumerics.Matrix3x2)">
            <summary>
            Returns a boolean indicating whether the given matrices are not equal.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>True if the matrices are not equal; False if they are equal.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.Equals(System.Numerics.System.DoubleNumerics.Matrix3x2)">
            <summary>
            Returns a boolean indicating whether the matrix is equal to the other given matrix.
            </summary>
            <param name="other">The other matrix to test equality against.</param>
            <returns>True if this matrix is equal to other; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this matrix instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this matrix; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.ToString">
            <summary>
            Returns a String representing this matrix instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix3x2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:System.Numerics.System.DoubleNumerics.Matrix4x4">
            <summary>
            A structure encapsulating a 4x4 matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix4x4.M11">
            <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix4x4.M12">
            <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix4x4.M13">
            <summary>
            Value at row 1, column 3 of the matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix4x4.M14">
            <summary>
            Value at row 1, column 4 of the matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix4x4.M21">
            <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix4x4.M22">
            <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix4x4.M23">
            <summary>
            Value at row 2, column 3 of the matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix4x4.M24">
            <summary>
            Value at row 2, column 4 of the matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix4x4.M31">
            <summary>
            Value at row 3, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix4x4.M32">
            <summary>
            Value at row 3, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix4x4.M33">
            <summary>
            Value at row 3, column 3 of the matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix4x4.M34">
            <summary>
            Value at row 3, column 4 of the matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix4x4.M41">
            <summary>
            Value at row 4, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix4x4.M42">
            <summary>
            Value at row 4, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix4x4.M43">
            <summary>
            Value at row 4, column 3 of the matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Matrix4x4.M44">
            <summary>
            Value at row 4, column 4 of the matrix.
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Matrix4x4.Identity">
            <summary>
            Returns the multiplicative identity matrix.
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Matrix4x4.IsIdentity">
            <summary>
            Returns whether the matrix is the identity matrix.
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Matrix4x4.Translation">
            <summary>
            Gets or sets the translation component of this matrix.
            </summary>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Matrix4x4 from the given components.
            </summary>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.#ctor(System.Numerics.System.DoubleNumerics.Matrix3x2)">
            <summary>
            Constructs a Matrix4x4 from the given Matrix3x2.
            </summary>
            <param name="value">The source Matrix3x2.</param>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateBillboard(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Creates a spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard matrix</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateConstrainedBillboard(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Creates a cylindrical billboard that rotates around a specified axis.
            </summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="rotateAxis">Axis to rotate the billboard around.</param>
            <param name="cameraForwardVector">Forward vector of the camera.</param>
            <param name="objectForwardVector">Forward vector of the object.</param>
            <returns>The created billboard matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateTranslation(System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="position">The amount to translate in each axis.</param>
            <returns>The translation matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateTranslation(System.Double,System.Double,System.Double)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="xPosition">The amount to translate on the X-axis.</param>
            <param name="yPosition">The amount to translate on the Y-axis.</param>
            <param name="zPosition">The amount to translate on the Z-axis.</param>
            <returns>The translation matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateScale(System.Double,System.Double,System.Double)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="xScale">Value to scale by on the X-axis.</param>
            <param name="yScale">Value to scale by on the Y-axis.</param>
            <param name="zScale">Value to scale by on the Z-axis.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateScale(System.Double,System.Double,System.Double,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Creates a scaling matrix with a center point.
            </summary>
            <param name="xScale">Value to scale by on the X-axis.</param>
            <param name="yScale">Value to scale by on the Y-axis.</param>
            <param name="zScale">Value to scale by on the Z-axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateScale(System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scales">The vector containing the amount to scale by on each axis.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateScale(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Creates a scaling matrix with a center point.
            </summary>
            <param name="scales">The vector containing the amount to scale by on each axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateScale(System.Double)">
            <summary>
            Creates a uniform scaling matrix that scales equally on each axis.
            </summary>
            <param name="scale">The uniform scaling factor.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateScale(System.Double,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Creates a uniform scaling matrix that scales equally on each axis with a center point.
            </summary>
            <param name="scale">The uniform scaling factor.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateRotationX(System.Double)">
            <summary>
            Creates a matrix for rotating points around the X-axis.
            </summary>
            <param name="radians">The amount, in radians, by which to rotate around the X-axis.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateRotationX(System.Double,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Creates a matrix for rotating points around the X-axis, from a center point.
            </summary>
            <param name="radians">The amount, in radians, by which to rotate around the X-axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateRotationY(System.Double)">
            <summary>
            Creates a matrix for rotating points around the Y-axis.
            </summary>
            <param name="radians">The amount, in radians, by which to rotate around the Y-axis.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateRotationY(System.Double,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Creates a matrix for rotating points around the Y-axis, from a center point.
            </summary>
            <param name="radians">The amount, in radians, by which to rotate around the Y-axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateRotationZ(System.Double)">
            <summary>
            Creates a matrix for rotating points around the Z-axis.
            </summary>
            <param name="radians">The amount, in radians, by which to rotate around the Z-axis.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateRotationZ(System.Double,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Creates a matrix for rotating points around the Z-axis, from a center point.
            </summary>
            <param name="radians">The amount, in radians, by which to rotate around the Z-axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateFromAxisAngle(System.Numerics.System.DoubleNumerics.Vector3,System.Double)">
            <summary>
            Creates a matrix that rotates around an arbitrary vector.
            </summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="angle">The angle to rotate around the given axis, in radians.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreatePerspectiveFieldOfView(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a perspective projection matrix based on a field of view, aspect ratio, and near and far view plane distances. 
            </summary>
            <param name="fieldOfView">Field of view in the y direction, in radians.</param>
            <param name="aspectRatio">Aspect ratio, defined as view space width divided by height.</param>
            <param name="nearPlaneDistance">Distance to the near view plane.</param>
            <param name="farPlaneDistance">Distance to the far view plane.</param>
            <returns>The perspective projection matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreatePerspective(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a perspective projection matrix from the given view volume dimensions.
            </summary>
            <param name="width">Width of the view volume at the near view plane.</param>
            <param name="height">Height of the view volume at the near view plane.</param>
            <param name="nearPlaneDistance">Distance to the near view plane.</param>
            <param name="farPlaneDistance">Distance to the far view plane.</param>
            <returns>The perspective projection matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreatePerspectiveOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a customized, perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the view volume at the near view plane.</param>
            <param name="right">Maximum x-value of the view volume at the near view plane.</param>
            <param name="bottom">Minimum y-value of the view volume at the near view plane.</param>
            <param name="top">Maximum y-value of the view volume at the near view plane.</param>
            <param name="nearPlaneDistance">Distance to the near view plane.</param>
            <param name="farPlaneDistance">Distance to of the far view plane.</param>
            <returns>The perspective projection matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateOrthographic(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an orthographic perspective matrix from the given view volume dimensions.
            </summary>
            <param name="width">Width of the view volume.</param>
            <param name="height">Height of the view volume.</param>
            <param name="zNearPlane">Minimum Z-value of the view volume.</param>
            <param name="zFarPlane">Maximum Z-value of the view volume.</param>
            <returns>The orthographic projection matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateOrthographicOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Builds a customized, orthographic projection matrix.
            </summary>
            <param name="left">Minimum X-value of the view volume.</param>
            <param name="right">Maximum X-value of the view volume.</param>
            <param name="bottom">Minimum Y-value of the view volume.</param>
            <param name="top">Maximum Y-value of the view volume.</param>
            <param name="zNearPlane">Minimum Z-value of the view volume.</param>
            <param name="zFarPlane">Maximum Z-value of the view volume.</param>
            <returns>The orthographic projection matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateLookAt(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Creates a view matrix.
            </summary>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraTarget">The target towards which the camera is pointing.</param>
            <param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
            <returns>The view matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateWorld(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Creates a world matrix with the specified parameters.
            </summary>
            <param name="position">The position of the object; used in translation operations.</param>
            <param name="forward">Forward direction of the object.</param>
            <param name="up">Upward direction of the object; usually [0, 1, 0].</param>
            <returns>The world matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateFromQuaternion(System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Creates a rotation matrix from the given Quaternion rotation value.
            </summary>
            <param name="quaternion">The source Quaternion.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateFromYawPitchRoll(System.Double,System.Double,System.Double)">
            <summary>
            Creates a rotation matrix from the specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Angle of rotation, in radians, around the Y-axis.</param>
            <param name="pitch">Angle of rotation, in radians, around the X-axis.</param>
            <param name="roll">Angle of rotation, in radians, around the Z-axis.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateShadow(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Plane)">
            <summary>
            Creates a Matrix that flattens geometry into a specified Plane as if casting a shadow from a specified light source.
            </summary>
            <param name="lightDirection">The direction from which the light that will cast the shadow is coming.</param>
            <param name="plane">The Plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
            <returns>A new Matrix that can be used to flatten geometry onto the specified plane from the specified direction.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.CreateReflection(System.Numerics.System.DoubleNumerics.Plane)">
            <summary>
            Creates a Matrix that reflects the coordinate system about a specified Plane.
            </summary>
            <param name="value">The Plane about which to create a reflection.</param>
            <returns>A new matrix expressing the reflection.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.GetDeterminant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.Invert(System.Numerics.System.DoubleNumerics.Matrix4x4,System.Numerics.System.DoubleNumerics.Matrix4x4@)">
            <summary>
            Attempts to calculate the inverse of the given matrix. If successful, result will contain the inverted matrix.
            </summary>
            <param name="matrix">The source matrix to invert.</param>
            <param name="result">If successful, contains the inverted matrix.</param>
            <returns>True if the source matrix could be inverted; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.Decompose(System.Numerics.System.DoubleNumerics.Matrix4x4,System.Numerics.System.DoubleNumerics.Vector3@,System.Numerics.System.DoubleNumerics.Quaternion@,System.Numerics.System.DoubleNumerics.Vector3@)">
            <summary>
            Attempts to extract the scale, translation, and rotation components from the given scale/rotation/translation matrix.
            If successful, the out parameters will contained the extracted values.
            </summary>
            <param name="matrix">The source matrix.</param>
            <param name="scale">The scaling component of the transformation matrix.</param>
            <param name="rotation">The rotation component of the transformation matrix.</param>
            <param name="translation">The translation component of the transformation matrix</param>
            <returns>True if the source matrix was successfully decomposed; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.Transform(System.Numerics.System.DoubleNumerics.Matrix4x4,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Transforms the given matrix by applying the given Quaternion rotation.
            </summary>
            <param name="value">The source matrix to transform.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.Transpose(System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Transposes the rows and columns of a matrix.
            </summary>
            <param name="matrix">The source matrix.</param>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.Lerp(System.Numerics.System.DoubleNumerics.Matrix4x4,System.Numerics.System.DoubleNumerics.Matrix4x4,System.Double)">
            <summary>
            Linearly interpolates between the corresponding values of two matrices.
            </summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <param name="amount">The relative weight of the second source matrix.</param>
            <returns>The interpolated matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.Negate(System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Returns a new matrix with the negated elements of the given matrix.
            </summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.Add(System.Numerics.System.DoubleNumerics.Matrix4x4,System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Adds two matrices together.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.Subtract(System.Numerics.System.DoubleNumerics.Matrix4x4,System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Subtracts the second matrix from the first.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.Multiply(System.Numerics.System.DoubleNumerics.Matrix4x4,System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.Multiply(System.Numerics.System.DoubleNumerics.Matrix4x4,System.Double)">
            <summary>
            Multiplies a matrix by a scalar value.
            </summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling factor.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.op_UnaryNegation(System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Returns a new matrix with the negated elements of the given matrix.
            </summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.op_Addition(System.Numerics.System.DoubleNumerics.Matrix4x4,System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Adds two matrices together.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.op_Subtraction(System.Numerics.System.DoubleNumerics.Matrix4x4,System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Subtracts the second matrix from the first.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.op_Multiply(System.Numerics.System.DoubleNumerics.Matrix4x4,System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.op_Multiply(System.Numerics.System.DoubleNumerics.Matrix4x4,System.Double)">
            <summary>
            Multiplies a matrix by a scalar value.
            </summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling factor.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.op_Equality(System.Numerics.System.DoubleNumerics.Matrix4x4,System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Returns a boolean indicating whether the given two matrices are equal.
            </summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.op_Inequality(System.Numerics.System.DoubleNumerics.Matrix4x4,System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Returns a boolean indicating whether the given two matrices are not equal.
            </summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are not equal; False if they are equal.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.Equals(System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Returns a boolean indicating whether this matrix instance is equal to the other given matrix.
            </summary>
            <param name="other">The matrix to compare this instance to.</param>
            <returns>True if the matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this matrix instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this matrix; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.ToString">
            <summary>
            Returns a String representing this matrix instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Matrix4x4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:System.Numerics.System.DoubleNumerics.Plane">
            <summary>
            A structure encapsulating a 3D Plane
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Plane.Normal">
            <summary>
            The normal vector of the Plane.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Plane.D">
            <summary>
            The distance of the Plane along its normal from the origin.
            </summary>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Plane.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Plane from the X, Y, and Z components of its normal, and its distance from the origin on that normal.
            </summary>
            <param name="x">The X-component of the normal.</param>
            <param name="y">The Y-component of the normal.</param>
            <param name="z">The Z-component of the normal.</param>
            <param name="d">The distance of the Plane along its normal from the origin.</param>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Plane.#ctor(System.Numerics.System.DoubleNumerics.Vector3,System.Double)">
            <summary>
            Constructs a Plane from the given normal and distance along the normal from the origin.
            </summary>
            <param name="normal">The Plane's normal vector.</param>
            <param name="d">The Plane's distance from the origin along its normal vector.</param>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Plane.#ctor(System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Constructs a Plane from the given Vector4.
            </summary>
            <param name="value">A vector whose first 3 elements describe the normal vector, 
            and whose W component defines the distance along that normal from the origin.</param>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Plane.CreateFromVertices(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Creates a Plane that contains the three given points.
            </summary>
            <param name="point1">The first point defining the Plane.</param>
            <param name="point2">The second point defining the Plane.</param>
            <param name="point3">The third point defining the Plane.</param>
            <returns>The Plane containing the three points.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Plane.Normalize(System.Numerics.System.DoubleNumerics.Plane)">
            <summary>
            Creates a new Plane whose normal vector is the source Plane's normal vector normalized.
            </summary>
            <param name="value">The source Plane.</param>
            <returns>The normalized Plane.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Plane.Transform(System.Numerics.System.DoubleNumerics.Plane,System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Transforms a normalized Plane by a Matrix.
            </summary>
            <param name="plane"> The normalized Plane to transform. 
            This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param>
            <param name="matrix">The transformation matrix to apply to the Plane.</param>
            <returns>The transformed Plane.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Plane.Transform(System.Numerics.System.DoubleNumerics.Plane,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
             Transforms a normalized Plane by a Quaternion rotation.
            </summary>
            <param name="plane"> The normalized Plane to transform.
            This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param>
            <param name="rotation">The Quaternion rotation to apply to the Plane.</param>
            <returns>A new Plane that results from applying the rotation.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Plane.Dot(System.Numerics.System.DoubleNumerics.Plane,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Calculates the dot product of a Plane and Vector4.
            </summary>
            <param name="plane">The Plane.</param>
            <param name="value">The Vector4.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Plane.DotCoordinate(System.Numerics.System.DoubleNumerics.Plane,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Returns the dot product of a specified Vector3 and the normal vector of this Plane plus the distance (D) value of the Plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="value">The Vector3.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Plane.DotNormal(System.Numerics.System.DoubleNumerics.Plane,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Returns the dot product of a specified Vector3 and the Normal vector of this Plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="value">The Vector3.</param>
            <returns>The resulting dot product.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Plane.op_Equality(System.Numerics.System.DoubleNumerics.Plane,System.Numerics.System.DoubleNumerics.Plane)">
            <summary>
            Returns a boolean indicating whether the two given Planes are equal.
            </summary>
            <param name="value1">The first Plane to compare.</param>
            <param name="value2">The second Plane to compare.</param>
            <returns>True if the Planes are equal; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Plane.op_Inequality(System.Numerics.System.DoubleNumerics.Plane,System.Numerics.System.DoubleNumerics.Plane)">
            <summary>
            Returns a boolean indicating whether the two given Planes are not equal.
            </summary>
            <param name="value1">The first Plane to compare.</param>
            <param name="value2">The second Plane to compare.</param>
            <returns>True if the Planes are not equal; False if they are equal.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Plane.Equals(System.Numerics.System.DoubleNumerics.Plane)">
            <summary>
            Returns a boolean indicating whether the given Plane is equal to this Plane instance.
            </summary>
            <param name="other">The Plane to compare this instance to.</param>
            <returns>True if the other Plane is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Plane.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this Plane instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Plane; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Plane.ToString">
            <summary>
            Returns a String representing this Plane instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Plane.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:System.Numerics.System.DoubleNumerics.Quaternion">
            <summary>
            A structure encapsulating a four-dimensional vector (x,y,z,w), 
            which is used to efficiently rotate an object about the (x,y,z) vector by the angle theta, where w = cos(theta/2).
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Quaternion.X">
            <summary>
            Specifies the X-value of the vector component of the Quaternion.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Quaternion.Y">
            <summary>
            Specifies the Y-value of the vector component of the Quaternion.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Quaternion.Z">
            <summary>
            Specifies the Z-value of the vector component of the Quaternion.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Quaternion.W">
            <summary>
            Specifies the rotation component of the Quaternion.
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Quaternion.Identity">
            <summary>
            Returns a Quaternion representing no rotation. 
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Quaternion.IsIdentity">
            <summary>
            Returns whether the Quaternion is the identity Quaternion.
            </summary>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Quaternion from the given components.
            </summary>
            <param name="x">The X component of the Quaternion.</param>
            <param name="y">The Y component of the Quaternion.</param>
            <param name="z">The Z component of the Quaternion.</param>
            <param name="w">The W component of the Quaternion.</param>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.#ctor(System.Numerics.System.DoubleNumerics.Vector3,System.Double)">
            <summary>
            Constructs a Quaternion from the given vector and rotation parts.
            </summary>
            <param name="vectorPart">The vector part of the Quaternion.</param>
            <param name="scalarPart">The rotation part of the Quaternion.</param>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.Length">
            <summary>
            Calculates the length of the Quaternion.
            </summary>
            <returns>The computed length of the Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.LengthSquared">
            <summary>
            Calculates the length squared of the Quaternion. This operation is cheaper than Length().
            </summary>
            <returns>The length squared of the Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.Normalize(System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Divides each component of the Quaternion by the length of the Quaternion.
            </summary>
            <param name="value">The source Quaternion.</param>
            <returns>The normalized Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.Conjugate(System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Creates the conjugate of a specified Quaternion.
            </summary>
            <param name="value">The Quaternion of which to return the conjugate.</param>
            <returns>A new Quaternion that is the conjugate of the specified one.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.Inverse(System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Returns the inverse of a Quaternion.
            </summary>
            <param name="value">The source Quaternion.</param>
            <returns>The inverted Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.CreateFromAxisAngle(System.Numerics.System.DoubleNumerics.Vector3,System.Double)">
            <summary>
            Creates a Quaternion from a normalized vector axis and an angle to rotate about the vector.
            </summary>
            <param name="axis">The unit vector to rotate around.
            This vector must be normalized before calling this function or the resulting Quaternion will be incorrect.</param>
            <param name="angle">The angle, in radians, to rotate around the vector.</param>
            <returns>The created Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.CreateFromYawPitchRoll(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new Quaternion from the given yaw, pitch, and roll, in radians.
            </summary>
            <param name="yaw">The yaw angle, in radians, around the Y-axis.</param>
            <param name="pitch">The pitch angle, in radians, around the X-axis.</param>
            <param name="roll">The roll angle, in radians, around the Z-axis.</param>
            <returns></returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.CreateFromRotationMatrix(System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Creates a Quaternion from the given rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>The created Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.Dot(System.Numerics.System.DoubleNumerics.Quaternion,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Calculates the dot product of two Quaternions.
            </summary>
            <param name="quaternion1">The first source Quaternion.</param>
            <param name="quaternion2">The second source Quaternion.</param>
            <returns>The dot product of the Quaternions.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.Slerp(System.Numerics.System.DoubleNumerics.Quaternion,System.Numerics.System.DoubleNumerics.Quaternion,System.Double)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="quaternion1">The first source Quaternion.</param>
            <param name="quaternion2">The second source Quaternion.</param>
            <param name="amount">The relative weight of the second source Quaternion in the interpolation.</param>
            <returns>The interpolated Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.Lerp(System.Numerics.System.DoubleNumerics.Quaternion,System.Numerics.System.DoubleNumerics.Quaternion,System.Double)">
            <summary>
             Linearly interpolates between two quaternions.
            </summary>
            <param name="quaternion1">The first source Quaternion.</param>
            <param name="quaternion2">The second source Quaternion.</param>
            <param name="amount">The relative weight of the second source Quaternion in the interpolation.</param>
            <returns>The interpolated Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.Concatenate(System.Numerics.System.DoubleNumerics.Quaternion,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation.
            </summary>
            <param name="value1">The first Quaternion rotation in the series.</param>
            <param name="value2">The second Quaternion rotation in the series.</param>
            <returns>A new Quaternion representing the concatenation of the value1 rotation followed by the value2 rotation.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.Negate(System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Flips the sign of each component of the quaternion.
            </summary>
            <param name="value">The source Quaternion.</param>
            <returns>The negated Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.Add(System.Numerics.System.DoubleNumerics.Quaternion,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Adds two Quaternions element-by-element.
            </summary>
            <param name="value1">The first source Quaternion.</param>
            <param name="value2">The second source Quaternion.</param>
            <returns>The result of adding the Quaternions.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.Subtract(System.Numerics.System.DoubleNumerics.Quaternion,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Subtracts one Quaternion from another.
            </summary>
            <param name="value1">The first source Quaternion.</param>
            <param name="value2">The second Quaternion, to be subtracted from the first.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.Multiply(System.Numerics.System.DoubleNumerics.Quaternion,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Multiplies two Quaternions together.
            </summary>
            <param name="value1">The Quaternion on the left side of the multiplication.</param>
            <param name="value2">The Quaternion on the right side of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.Multiply(System.Numerics.System.DoubleNumerics.Quaternion,System.Double)">
            <summary>
            Multiplies a Quaternion by a scalar value.
            </summary>
            <param name="value1">The source Quaternion.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.Divide(System.Numerics.System.DoubleNumerics.Quaternion,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Divides a Quaternion by another Quaternion.
            </summary>
            <param name="value1">The source Quaternion.</param>
            <param name="value2">The divisor.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.op_UnaryNegation(System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Flips the sign of each component of the quaternion.
            </summary>
            <param name="value">The source Quaternion.</param>
            <returns>The negated Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.op_Addition(System.Numerics.System.DoubleNumerics.Quaternion,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Adds two Quaternions element-by-element.
            </summary>
            <param name="value1">The first source Quaternion.</param>
            <param name="value2">The second source Quaternion.</param>
            <returns>The result of adding the Quaternions.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.op_Subtraction(System.Numerics.System.DoubleNumerics.Quaternion,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Subtracts one Quaternion from another.
            </summary>
            <param name="value1">The first source Quaternion.</param>
            <param name="value2">The second Quaternion, to be subtracted from the first.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.op_Multiply(System.Numerics.System.DoubleNumerics.Quaternion,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Multiplies two Quaternions together.
            </summary>
            <param name="value1">The Quaternion on the left side of the multiplication.</param>
            <param name="value2">The Quaternion on the right side of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.op_Multiply(System.Numerics.System.DoubleNumerics.Quaternion,System.Double)">
            <summary>
            Multiplies a Quaternion by a scalar value.
            </summary>
            <param name="value1">The source Quaternion.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.op_Division(System.Numerics.System.DoubleNumerics.Quaternion,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Divides a Quaternion by another Quaternion.
            </summary>
            <param name="value1">The source Quaternion.</param>
            <param name="value2">The divisor.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.op_Equality(System.Numerics.System.DoubleNumerics.Quaternion,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Returns a boolean indicating whether the two given Quaternions are equal.
            </summary>
            <param name="value1">The first Quaternion to compare.</param>
            <param name="value2">The second Quaternion to compare.</param>
            <returns>True if the Quaternions are equal; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.op_Inequality(System.Numerics.System.DoubleNumerics.Quaternion,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Returns a boolean indicating whether the two given Quaternions are not equal.
            </summary>
            <param name="value1">The first Quaternion to compare.</param>
            <param name="value2">The second Quaternion to compare.</param>
            <returns>True if the Quaternions are not equal; False if they are equal.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.Equals(System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Returns a boolean indicating whether the given Quaternion is equal to this Quaternion instance.
            </summary>
            <param name="other">The Quaternion to compare this instance to.</param>
            <returns>True if the other Quaternion is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this Quaternion instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Quaternion; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.ToString">
            <summary>
            Returns a String representing this Quaternion instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Quaternion.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:System.Numerics.System.DoubleNumerics.Vector2">
            <summary>
            A structure encapsulating two single precision floating point values and provides hardware accelerated methods.
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Vector2.Zero">
            <summary>
            Returns the vector (0,0).
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Vector2.One">
            <summary>
            Returns the vector (1,1).
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Vector2.UnitX">
            <summary>
            Returns the vector (1,0).
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Vector2.UnitY">
            <summary>
            Returns the vector (0,1).
            </summary>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this Vector2 instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Vector2; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.ToString">
            <summary>
            Returns a String representing this Vector2 instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.ToString(System.String)">
            <summary>
            Returns a String representing this Vector2 instance, using the specified format to format individual elements.
            </summary>
            <param name="format">The format of individual elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a String representing this Vector2 instance, using the specified format to format individual elements 
            and the given IFormatProvider.
            </summary>
            <param name="format">The format of individual elements.</param>
            <param name="formatProvider">The format provider to use when formatting elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Length">
            <summary>
            Returns the length of the vector.
            </summary>
            <returns>The vector's length.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.LengthSquared">
            <summary>
            Returns the length of the vector squared. This operation is cheaper than Length().
            </summary>
            <returns>The vector's length squared.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Distance(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Returns the Euclidean distance between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.DistanceSquared(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Returns the Euclidean distance squared between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance squared.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Normalize(System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Returns a vector with the same direction as the given vector, but with a length of 1.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Reflect(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">The normal of the surface being reflected off.</param>
            <returns>The reflected vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Clamp(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Restricts a vector between a min and max value.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Lerp(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2,System.Double)">
            <summary>
            Linearly interpolates between two vectors based on the given weighting.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of the second source vector.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Transform(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Matrix3x2)">
            <summary>
            Transforms a vector by the given matrix.
            </summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Transform(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Transforms a vector by the given matrix.
            </summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.TransformNormal(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Matrix3x2)">
            <summary>
            Transforms a vector normal by the given matrix.
            </summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.TransformNormal(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Transforms a vector normal by the given matrix.
            </summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Transform(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Add(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Subtract(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Multiply(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Multiply(System.Numerics.System.DoubleNumerics.Vector2,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Multiply(System.Double,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Divide(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Divide(System.Numerics.System.DoubleNumerics.Vector2,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="divisor">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Negate(System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Vector2.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Vector2.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.#ctor(System.Double)">
            <summary>
            Constructs a vector whose elements are all the single specified value.
            </summary>
            <param name="value">The element to fill the vector with.</param>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.CopyTo(System.Double[])">
            <summary>
            Copies the contents of the vector into the given array.
            </summary>
            <param name="array">The destination array.</param>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.CopyTo(System.Double[],System.Int32)">
            <summary>
            Copies the contents of the vector into the given array, starting from the given index.
            </summary>
            <exception cref="T:System.ArgumentNullException">If array is null.</exception>
            <exception cref="T:System.RankException">If array is multidimensional.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is greater than end of the array or index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">If number of elements in source vector is greater than those available in destination array
            or if there are not enough elements to copy.</exception>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Equals(System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Returns a boolean indicating whether the given Vector2 is equal to this Vector2 instance.
            </summary>
            <param name="other">The Vector2 to compare this instance to.</param>
            <returns>True if the other Vector2 is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Dot(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Min(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Returns a vector whose elements are the minimum of each of the pairs of elements in the two source vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The minimized vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Max(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Returns a vector whose elements are the maximum of each of the pairs of elements in the two source vectors
            </summary>
            <param name="value1">The first source vector</param>
            <param name="value2">The second source vector</param>
            <returns>The maximized vector</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.Abs(System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The absolute value vector.</returns>        
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.SquareRoot(System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Returns a vector whose elements are the square root of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The square root vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.op_Addition(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.op_Subtraction(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.op_Multiply(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.op_Multiply(System.Double,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.op_Multiply(System.Numerics.System.DoubleNumerics.Vector2,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.op_Division(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.op_Division(System.Numerics.System.DoubleNumerics.Vector2,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.op_UnaryNegation(System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.op_Equality(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Returns a boolean indicating whether the two given vectors are equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector2.op_Inequality(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Vector2)">
            <summary>
            Returns a boolean indicating whether the two given vectors are not equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are not equal; False if they are equal.</returns>
        </member>
        <member name="T:System.Numerics.System.DoubleNumerics.Vector3">
            <summary>
            A structure encapsulating three single precision floating point values and provides hardware accelerated methods.
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Vector3.Zero">
            <summary>
            Returns the vector (0,0,0).
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Vector3.One">
            <summary>
            Returns the vector (1,1,1).
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Vector3.UnitX">
            <summary>
            Returns the vector (1,0,0).
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Vector3.UnitY">
            <summary>
            Returns the vector (0,1,0).
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Vector3.UnitZ">
            <summary>
            Returns the vector (0,0,1).
            </summary>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this Vector3 instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Vector3; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.ToString">
            <summary>
            Returns a String representing this Vector3 instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.ToString(System.String)">
            <summary>
            Returns a String representing this Vector3 instance, using the specified format to format individual elements.
            </summary>
            <param name="format">The format of individual elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a String representing this Vector3 instance, using the specified format to format individual elements 
            and the given IFormatProvider.
            </summary>
            <param name="format">The format of individual elements.</param>
            <param name="formatProvider">The format provider to use when formatting elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Length">
            <summary>
            Returns the length of the vector.
            </summary>
            <returns>The vector's length.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.LengthSquared">
            <summary>
            Returns the length of the vector squared. This operation is cheaper than Length().
            </summary>
            <returns>The vector's length squared.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Distance(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Returns the Euclidean distance between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.DistanceSquared(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Returns the Euclidean distance squared between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance squared.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Normalize(System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Returns a vector with the same direction as the given vector, but with a length of 1.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Cross(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Computes the cross product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The cross product.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Reflect(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">The normal of the surface being reflected off.</param>
            <returns>The reflected vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Clamp(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Restricts a vector between a min and max value.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The restricted vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Lerp(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3,System.Double)">
            <summary>
            Linearly interpolates between two vectors based on the given weighting.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of the second source vector.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Transform(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Transforms a vector by the given matrix.
            </summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.TransformNormal(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Transforms a vector normal by the given matrix.
            </summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Transform(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Add(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Subtract(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Multiply(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Multiply(System.Numerics.System.DoubleNumerics.Vector3,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Multiply(System.Double,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Divide(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Divide(System.Numerics.System.DoubleNumerics.Vector3,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="divisor">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Negate(System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Vector3.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Vector3.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Vector3.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.#ctor(System.Double)">
            <summary>
            Constructs a vector whose elements are all the single specified value.
            </summary>
            <param name="value">The element to fill the vector with.</param>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.#ctor(System.Numerics.System.DoubleNumerics.Vector2,System.Double)">
            <summary>
            Constructs a Vector3 from the given Vector2 and a third value.
            </summary>
            <param name="value">The Vector to extract X and Y components from.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.CopyTo(System.Double[])">
            <summary>
            Copies the contents of the vector into the given array.
            </summary>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.CopyTo(System.Double[],System.Int32)">
            <summary>
            Copies the contents of the vector into the given array, starting from index.
            </summary>
            <exception cref="T:System.ArgumentNullException">If array is null.</exception>
            <exception cref="T:System.RankException">If array is multidimensional.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is greater than end of the array or index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">If number of elements in source vector is greater than those available in destination array.</exception>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Equals(System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Returns a boolean indicating whether the given Vector3 is equal to this Vector3 instance.
            </summary>
            <param name="other">The Vector3 to compare this instance to.</param>
            <returns>True if the other Vector3 is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Dot(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Min(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Returns a vector whose elements are the minimum of each of the pairs of elements in the two source vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The minimized vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Max(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Returns a vector whose elements are the maximum of each of the pairs of elements in the two source vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The maximized vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.Abs(System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.SquareRoot(System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Returns a vector whose elements are the square root of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The square root vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.op_Addition(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.op_Subtraction(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.op_Multiply(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.op_Multiply(System.Numerics.System.DoubleNumerics.Vector3,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.op_Multiply(System.Double,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.op_Division(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.op_Division(System.Numerics.System.DoubleNumerics.Vector3,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.op_UnaryNegation(System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.op_Equality(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Returns a boolean indicating whether the two given vectors are equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector3.op_Inequality(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Vector3)">
            <summary>
            Returns a boolean indicating whether the two given vectors are not equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are not equal; False if they are equal.</returns>
        </member>
        <member name="T:System.Numerics.System.DoubleNumerics.Vector4">
            <summary>
            A structure encapsulating four single precision floating point values and provides hardware accelerated methods.
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Vector4.Zero">
            <summary>
            Returns the vector (0,0,0,0).
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Vector4.One">
            <summary>
            Returns the vector (1,1,1,1).
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Vector4.UnitX">
            <summary>
            Returns the vector (1,0,0,0).
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Vector4.UnitY">
            <summary>
            Returns the vector (0,1,0,0).
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Vector4.UnitZ">
            <summary>
            Returns the vector (0,0,1,0).
            </summary>
        </member>
        <member name="P:System.Numerics.System.DoubleNumerics.Vector4.UnitW">
            <summary>
            Returns the vector (0,0,0,1).
            </summary>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this Vector4 instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Vector4; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.ToString">
            <summary>
            Returns a String representing this Vector4 instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.ToString(System.String)">
            <summary>
            Returns a String representing this Vector4 instance, using the specified format to format individual elements.
            </summary>
            <param name="format">The format of individual elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a String representing this Vector4 instance, using the specified format to format individual elements 
            and the given IFormatProvider.
            </summary>
            <param name="format">The format of individual elements.</param>
            <param name="formatProvider">The format provider to use when formatting elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Length">
            <summary>
            Returns the length of the vector. This operation is cheaper than Length().
            </summary>
            <returns>The vector's length.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.LengthSquared">
            <summary>
            Returns the length of the vector squared.
            </summary>
            <returns>The vector's length squared.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Distance(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Returns the Euclidean distance between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.DistanceSquared(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Returns the Euclidean distance squared between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance squared.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Normalize(System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Returns a vector with the same direction as the given vector, but with a length of 1.
            </summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Clamp(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Restricts a vector between a min and max value.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The restricted vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Lerp(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Vector4,System.Double)">
            <summary>
            Linearly interpolates between two vectors based on the given weighting.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of the second source vector.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Transform(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Transforms a vector by the given matrix.
            </summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Transform(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Transforms a vector by the given matrix.
            </summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Transform(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Matrix4x4)">
            <summary>
            Transforms a vector by the given matrix.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Transform(System.Numerics.System.DoubleNumerics.Vector2,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Transform(System.Numerics.System.DoubleNumerics.Vector3,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Transform(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Quaternion)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Add(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Subtract(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Multiply(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Multiply(System.Numerics.System.DoubleNumerics.Vector4,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Multiply(System.Double,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Divide(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Divide(System.Numerics.System.DoubleNumerics.Vector4,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="divisor">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Negate(System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Vector4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Vector4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Vector4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:System.Numerics.System.DoubleNumerics.Vector4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.#ctor(System.Double)">
            <summary>
            Constructs a vector whose elements are all the single specified value.
            </summary>
            <param name="value">The element to fill the vector with.</param>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="w">W component.</param>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.#ctor(System.Numerics.System.DoubleNumerics.Vector2,System.Double,System.Double)">
            <summary>
            Constructs a Vector4 from the given Vector2 and a Z and W component.
            </summary>
            <param name="value">The vector to use as the X and Y components.</param>
            <param name="z">The Z component.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.#ctor(System.Numerics.System.DoubleNumerics.Vector3,System.Double)">
            <summary>
            Constructs a Vector4 from the given Vector3 and a W component.
            </summary>
            <param name="value">The vector to use as the X, Y, and Z components.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.CopyTo(System.Double[])">
            <summary>
            Copies the contents of the vector into the given array.
            </summary>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.CopyTo(System.Double[],System.Int32)">
            <summary>
            Copies the contents of the vector into the given array, starting from index.
            </summary>
            <exception cref="T:System.ArgumentNullException">If array is null.</exception>
            <exception cref="T:System.RankException">If array is multidimensional.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is greater than end of the array or index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">If number of elements in source vector is greater than those available in destination array.</exception>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Equals(System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Returns a boolean indicating whether the given Vector4 is equal to this Vector4 instance.
            </summary>
            <param name="other">The Vector4 to compare this instance to.</param>
            <returns>True if the other Vector4 is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Dot(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Min(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Returns a vector whose elements are the minimum of each of the pairs of elements in the two source vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The minimized vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Max(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Returns a vector whose elements are the maximum of each of the pairs of elements in the two source vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The maximized vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.Abs(System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.SquareRoot(System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Returns a vector whose elements are the square root of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The square root vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.op_Addition(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.op_Subtraction(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.op_Multiply(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.op_Multiply(System.Numerics.System.DoubleNumerics.Vector4,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.op_Multiply(System.Double,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.op_Division(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.op_Division(System.Numerics.System.DoubleNumerics.Vector4,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.op_UnaryNegation(System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.op_Equality(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Returns a boolean indicating whether the two given vectors are equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.System.DoubleNumerics.Vector4.op_Inequality(System.Numerics.System.DoubleNumerics.Vector4,System.Numerics.System.DoubleNumerics.Vector4)">
            <summary>
            Returns a boolean indicating whether the two given vectors are not equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are not equal; False if they are equal.</returns>
        </member>
    </members>
</doc>
